package dev.echo.module.impl.exploit;

import dev.echo.listener.Link;
import dev.echo.listener.Listener;
import dev.echo.listener.event.impl.game.WorldEvent;
import dev.echo.listener.event.impl.network.PacketSendEvent;
import dev.echo.listener.event.impl.player.MotionEvent;
import dev.echo.module.Category;
import dev.echo.module.Module;
import dev.echo.module.impl.combat.KillAura;
import dev.echo.module.settings.impl.BooleanSetting;
import dev.echo.module.settings.impl.MultipleBoolSetting;
import dev.echo.module.settings.impl.NumberSetting;
import dev.echo.utils.misc.MathUtils;
import dev.echo.utils.player.ChatUtil;
import dev.echo.utils.player.PingSpoofUtil;
import dev.echo.utils.server.PacketUtils;
import dev.echo.utils.time.TimerUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.stream.Collectors;

public final class Disabler extends Module {
    private int packetPlayers = 0;
    private final TimerUtil stopwatch = new TimerUtil();
    private final MultipleBoolSetting disablers = new MultipleBoolSetting("Disablers",
            new BooleanSetting("MMC", false),
            new BooleanSetting("PingSpoof", false),
            new BooleanSetting("Delay C00", false),
            new BooleanSetting("Vulcan Strafe", false),
            new BooleanSetting("Timer", false));

    private final NumberSetting pingspoofdelay = new NumberSetting("Spoof Delay", 500, 5000, 0, 10);
    private final NumberSetting packetloss = new NumberSetting("Packet Loss", 0, 100, 0, 1);
    private final CopyOnWriteArrayList<Packet> packets = new CopyOnWriteArrayList<>();

    public static final TimerUtil timer = new TimerUtil();
    int bal = 0;

    public Disabler() {
        super("Disabler", Category.EXPLOIT, "Disables some anticheats");
        pingspoofdelay.addParent(disablers, PingSpoof -> PingSpoof.getSetting("PingSpoof").isEnabled());
        packetloss.addParent(disablers, PingSpoof -> PingSpoof.getSetting("PingSpoof").isEnabled());
        this.addSettings(disablers, pingspoofdelay, packetloss);
    }

    @Link
    public Listener<MotionEvent> motionEventListener = e -> {
        final List<BooleanSetting> enabledBooleanSettings = disablers.getBoolSettings().stream().filter(BooleanSetting::isEnabled).collect(Collectors.toList());


        if (enabledBooleanSettings.size() == 1) {
            setSuffix(enabledBooleanSettings.get(0).name);
        } else if (enabledBooleanSettings.size() > 1) {
            setSuffix(enabledBooleanSettings.size() + " Enabled");
        } else {
            setSuffix("None");
        }


        for (BooleanSetting booleanSetting : disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                switch (booleanSetting.name) {
                    case "MMC":
                        if (timer.hasTimeElapsed(MathUtils.getRandomInRange(1000, 1500), true)) {
                            packets.forEach(PacketUtils::sendPacketNoEvent);
                            packets.clear();
                        }
                        break;
                }
            }
        }
    };

    @Link
    public Listener<PacketSendEvent> onPacketSend = event -> {
        if (mc.thePlayer == null) {
            return;
        }
        for (BooleanSetting booleanSetting : disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                switch (booleanSetting.name) {
                    case "PingSpoof": {
                        if (disablers.getSetting("PingSpoof").isEnabled()) {
                            PingSpoofUtil.spoof(event, pingspoofdelay.getValue().intValue(), true, true, true, true, true, packetloss.getValue().intValue());
                        } else {
                            PingSpoofUtil.spoof(event, 0, false, false, false, false, false, 0);
                        }
                    }
                    break;
                    case "Timer": {
                        if (mc.thePlayer.ticksExisted % 20 == 0) {
                            ChatUtil.print(bal);
                        }
                        StringBuilder builder = new StringBuilder();
                        for (int i = 32; i < 256; i++) {
                            builder.append((char) i);
                        }
                        PacketUtils.sendPacketNoEvent(new C19PacketResourcePackStatus(builder.toString(), C19PacketResourcePackStatus.Action.ACCEPTED));
                        PacketUtils.sendPacketNoEvent(new C19PacketResourcePackStatus(builder.toString(), C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));

                        Packet<?> packet = event.getPacket();

                        if (packet instanceof C03PacketPlayer) {
                            C03PacketPlayer c03PacketPlayer = ((C03PacketPlayer) packet);

                            if (!c03PacketPlayer.getRotating() && !c03PacketPlayer.isMoving() && ((mc.thePlayer.posX == mc.thePlayer.lastTickPosX && mc.thePlayer.posY == mc.thePlayer.lastTickPosY && mc.thePlayer.posZ == mc.thePlayer.lastTickPosZ))) {
                                event.setCancelled(true);
                            }
                            if (event.isCancelled()) {
                                bal -= 50;
                            }
                            bal += stopwatch.getTime();
                            stopwatch.reset();
                        }
                    }
                    break;
                    case "MMC":
                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                            if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                                if (EntityPlayerSP.serverSprintState) {
                                    PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                                    EntityPlayerSP.serverSprintState = false;
                                }
                            }
                            event.setCancelled(true);
                        }

                        if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
                            event.setCancelled(true);
                            packets.add(event.getPacket());
                        }
                        break;
                    case "Delay C00": {
                        final CopyOnWriteArrayList<Packet> packetslist = new CopyOnWriteArrayList<>();
                        if (event.getPacket() instanceof C00PacketKeepAlive) {
                            packetslist.add(event.getPacket());
                            event.setCancelled(true);
                        }
                        TimerUtil stopwatch = new TimerUtil();
                        if (stopwatch.hasTimeElapsed(500)) {
                            PacketUtils.sendPacket((Packet) packetslist);
                            stopwatch.reset();
                        }
                    }
                    break;

                }
                break;
            }
        }
    };

    @Link
    public Listener<WorldEvent> onWorldEvent = event -> {
        stopwatch.reset();
        bal = 0;
        timer.reset();
    };

    @Override
    public void onEnable() {
        bal = 0;
        stopwatch.reset();
        super.onEnable();
    }
}

