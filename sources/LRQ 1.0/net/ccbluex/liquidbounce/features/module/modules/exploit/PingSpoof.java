/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  kotlin.Unit
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.Nullable
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import kotlin.Unit;
import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.api.MinecraftVersion;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.ccbluex.liquidbounce.value.IntegerValue;
import org.jetbrains.annotations.Nullable;

@ModuleInfo(name="PingSpoof", description="Spoofs your ping to a given value.", category=ModuleCategory.EXPLOIT, supportedVersions={MinecraftVersion.MC_1_8})
public final class PingSpoof
extends Module {
    private final IntegerValue minDelayValue = new IntegerValue(this, "MinDelay", 500, 0, 5000){
        final /* synthetic */ PingSpoof this$0;

        protected void onChanged(int oldValue, int newValue) {
            int maxDelayValue2 = ((Number)PingSpoof.access$getMaxDelayValue$p(this.this$0).get()).intValue();
            if (maxDelayValue2 < newValue) {
                this.set(maxDelayValue2);
            }
        }
        {
            this.this$0 = $outer;
            super($super_call_param$1, $super_call_param$2, $super_call_param$3, $super_call_param$4);
        }
    };
    private final IntegerValue maxDelayValue = new IntegerValue(this, "MaxDelay", 1000, 0, 5000){
        final /* synthetic */ PingSpoof this$0;

        protected void onChanged(int oldValue, int newValue) {
            int minDelayValue2 = ((Number)PingSpoof.access$getMinDelayValue$p(this.this$0).get()).intValue();
            if (minDelayValue2 > newValue) {
                this.set(minDelayValue2);
            }
        }
        {
            this.this$0 = $outer;
            super($super_call_param$1, $super_call_param$2, $super_call_param$3, $super_call_param$4);
        }
    };
    private final HashMap<IPacket, Long> packetsMap = new HashMap();

    @Override
    public void onDisable() {
        this.packetsMap.clear();
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    @EventTarget
    public final void onPacket(PacketEvent event) {
        IPacket packet = event.getPacket();
        if (MinecraftInstance.classProvider.isCPacketKeepAlive(packet) || MinecraftInstance.classProvider.isCPacketClientStatus(packet)) {
            IEntityPlayerSP iEntityPlayerSP = MinecraftInstance.mc.getThePlayer();
            if (iEntityPlayerSP == null) {
                Intrinsics.throwNpe();
            }
            if (!iEntityPlayerSP.isDead()) {
                IEntityPlayerSP iEntityPlayerSP2 = MinecraftInstance.mc.getThePlayer();
                if (iEntityPlayerSP2 == null) {
                    Intrinsics.throwNpe();
                }
                if (!(iEntityPlayerSP2.getHealth() <= 0.0f) && !this.packetsMap.containsKey(packet)) {
                    event.cancelEvent();
                    HashMap<IPacket, Long> hashMap = this.packetsMap;
                    boolean bl = false;
                    boolean bl2 = false;
                    synchronized (hashMap) {
                        boolean bl3 = false;
                        Long l = this.packetsMap.put(packet, System.currentTimeMillis() + TimeUtils.randomDelay(((Number)this.minDelayValue.get()).intValue(), ((Number)this.maxDelayValue.get()).intValue()));
                    }
                }
            }
        }
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    @EventTarget(ignoreCondition=true)
    public final void onUpdate(@Nullable UpdateEvent event) {
        try {
            HashMap<IPacket, Long> hashMap = this.packetsMap;
            boolean bl = false;
            boolean bl2 = false;
            synchronized (hashMap) {
                boolean bl3 = false;
                Iterator<Map.Entry<IPacket, Long>> iterator = this.packetsMap.entrySet().iterator();
                while (iterator.hasNext()) {
                    Map.Entry<IPacket, Long> entry = iterator.next();
                    if (((Number)entry.getValue()).longValue() >= System.currentTimeMillis()) continue;
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(entry.getKey());
                    iterator.remove();
                }
                Unit unit = Unit.INSTANCE;
            }
        }
        catch (Throwable t) {
            t.printStackTrace();
        }
    }

    public static final /* synthetic */ IntegerValue access$getMaxDelayValue$p(PingSpoof $this) {
        return $this.maxDelayValue;
    }

    public static final /* synthetic */ IntegerValue access$getMinDelayValue$p(PingSpoof $this) {
        return $this.minDelayValue;
    }
}

