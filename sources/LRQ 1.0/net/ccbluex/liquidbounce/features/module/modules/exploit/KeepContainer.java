/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  kotlin.jvm.internal.Intrinsics
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.api.minecraft.client.gui.IGuiScreen;
import net.ccbluex.liquidbounce.api.minecraft.client.gui.inventory.IGuiContainer;
import net.ccbluex.liquidbounce.api.minecraft.client.network.IINetHandlerPlayClient;
import net.ccbluex.liquidbounce.api.minecraft.inventory.IContainer;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ISPacketCloseWindow;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.KeyEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.ScreenEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;

@ModuleInfo(name="KeepContainer", description="Allows you to open a formerly closed inventory container everywhere. (Press INSERT Key to open)", category=ModuleCategory.EXPLOIT)
public final class KeepContainer
extends Module {
    private IGuiContainer container;

    @Override
    public void onDisable() {
        if (this.container != null) {
            IINetHandlerPlayClient iINetHandlerPlayClient = MinecraftInstance.mc.getNetHandler();
            IGuiContainer iGuiContainer = this.container;
            if (iGuiContainer == null) {
                Intrinsics.throwNpe();
            }
            IContainer iContainer = iGuiContainer.getInventorySlots();
            if (iContainer == null) {
                Intrinsics.throwNpe();
            }
            iINetHandlerPlayClient.addToSendQueue(MinecraftInstance.classProvider.createCPacketCloseWindow(iContainer.getWindowId()));
        }
        this.container = null;
    }

    @EventTarget
    public final void onGui(ScreenEvent event) {
        IGuiScreen guiScreen = event.getGuiScreen();
        if (MinecraftInstance.classProvider.isGuiContainer(guiScreen) && !MinecraftInstance.classProvider.isGuiInventory(guiScreen)) {
            IGuiScreen iGuiScreen = guiScreen;
            if (iGuiScreen == null) {
                Intrinsics.throwNpe();
            }
            this.container = iGuiScreen.asGuiContainer();
        }
    }

    @EventTarget
    public final void onKey(KeyEvent event) {
        if (event.getKey() == 210) {
            if (this.container == null) {
                return;
            }
            MinecraftInstance.mc.displayGuiScreen(this.container);
        }
    }

    @EventTarget
    public final void onPacket(PacketEvent event) {
        if (MinecraftInstance.classProvider.isCPacketCloseWindow(event.getPacket())) {
            event.cancelEvent();
        } else if (MinecraftInstance.classProvider.isSPacketCloseWindow(event.getPacket())) {
            ISPacketCloseWindow packetCloseWindow = event.getPacket().asSPacketCloseWindow();
            if (this.container != null) {
                IGuiContainer iGuiContainer = this.container;
                if (iGuiContainer == null) {
                    Intrinsics.throwNpe();
                }
                if (iGuiContainer.getInventorySlots() != null) {
                    int n = packetCloseWindow.getWindowId();
                    IGuiContainer iGuiContainer2 = this.container;
                    if (iGuiContainer2 == null) {
                        Intrinsics.throwNpe();
                    }
                    IContainer iContainer = iGuiContainer2.getInventorySlots();
                    if (iContainer == null) {
                        Intrinsics.throwNpe();
                    }
                    if (n == iContainer.getWindowId()) {
                        this.container = null;
                    }
                }
            }
        }
    }
}

