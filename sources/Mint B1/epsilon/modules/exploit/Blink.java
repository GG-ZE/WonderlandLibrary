package epsilon.modules.exploit;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;

import org.lwjgl.input.Keyboard;

import epsilon.events.Event;
import epsilon.events.listeners.packet.EventSendPacket;
import epsilon.modules.Module;
import epsilon.settings.setting.BooleanSetting;
import epsilon.settings.setting.ModeSetting;
import epsilon.settings.setting.NumberSetting;
import epsilon.util.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

public class Blink extends Module {

	private final Queue<Packet> packetQueue = new ConcurrentLinkedDeque<>();
	
	Timer timer = new Timer();
	
	public BooleanSetting pulse = new BooleanSetting ("Pulse", false);
	
	public NumberSetting pulsedelay = new NumberSetting ("PulseDelay", 100, 1, 1000, 1);
	
	public ModeSetting mode = new ModeSetting ("Mode", "AllPackets", "AllPackets", "MotionOnly", "Classic");
	
	public Blink() {
		super("Blink", Keyboard.KEY_B, Category.EXPLOIT, "Suspends motion updates");
		this.addSettings(mode, pulse, pulsedelay);
	}
	
	public void onEvent(Event e) {
		if(mc.getNetHandler()==null) return;
		if(mc.isSingleplayer()) return;
		if(e instanceof EventSendPacket && mc.getNetHandler().doneLoadingTerrain) {

    		Packet p = e.getPacket();
    		
    		switch(mode.getMode()) {
    		case "AllPackets":

        		packetQueue.add(p);
        		e.setCancelled();
        		
    			break;
    		case "MotionOnly":
    			
    			if(p instanceof C03PacketPlayer) {

            		packetQueue.add(p);
            		e.setCancelled();
    			}
    			
    			break;
    			
    		case "Classic":
    			
    			if(p instanceof C03PacketPlayer && !(p instanceof C03PacketPlayer.C04PacketPlayerPosition || p instanceof C03PacketPlayer.C06PacketPlayerPosLook))
					e.setCancelled();
				
				if (p instanceof C03PacketPlayer.C04PacketPlayerPosition || p instanceof C03PacketPlayer.C06PacketPlayerPosLook ||
		                p instanceof C08PacketPlayerBlockPlacement ||
		                p instanceof C0APacketAnimation ||
		                p instanceof C0BPacketEntityAction || p instanceof C02PacketUseEntity
		                || p instanceof C0FPacketConfirmTransaction) {
		            e.setCancelled();

		            packetQueue.clear();
		        }
    			
    			break;
    		}
    		
    		
    		
			if(pulse.isEnabled()) {
	    		if(timer.hasTimeElapsed((long) pulsedelay.getValue()*20, true)) {
	    			for(Packet packet : packetQueue) {
	    				mc.getNetHandler().sendPacketNoEvent(packet);
	    			}
	    			packetQueue.clear();
	    		}
			}
			
		}
		
	}
	
	public void onDisable() {

		for(Packet packet : packetQueue) {
			mc.getNetHandler().sendPacketNoEvent(packet);
		}
		packetQueue.clear();
		
	}

}
