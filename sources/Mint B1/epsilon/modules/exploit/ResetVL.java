package epsilon.modules.exploit;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;

import org.lwjgl.input.Keyboard;

import epsilon.Epsilon;
import epsilon.events.Event;
import epsilon.events.listeners.EventMotion;
import epsilon.events.listeners.EventUpdate;
import epsilon.events.listeners.packet.EventSendPacket;
import epsilon.modules.Module;
import epsilon.settings.setting.ModeSetting;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook;

public class ResetVL extends Module {

	public ModeSetting mode = new ModeSetting ("Mode", "NCP", "NCP", "Hypixel", "Matrix", "Basic", "BasicPacket");
	

	private final Queue<Packet> packetQueue = new ConcurrentLinkedDeque<>();
	private int vlticks;
	
	public ResetVL() {
		super("ResetVL", Keyboard.KEY_NONE, Category.EXPLOIT, "Resets VL");
		this.addSettings(mode);
	}
	
	public void onEnable() {
		vlticks = 0;
	}
	
	public void onDisable() {

		mc.thePlayer.motionY = 0;
		mc.thePlayer.motionX *= 0.3;
		mc.thePlayer.motionZ *= 0.3;

		mc.thePlayer.setPosition(mc.thePlayer.lastTickPosX, mc.thePlayer.lastTickPosY, mc.thePlayer.lastTickPosZ);
		
		
		switch(mode.getMode()) {
		case "BasicPacket":
			mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer(false));
			
			mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer(true));
			
			break;
		
		}
		
		mc.timer.timerSpeed = 1;
		
		for(Packet packet : packetQueue) {
			mc.getNetHandler().sendPacketNoEvent(packet);
		}
		packetQueue.clear();
		
		
	}
	
	public void onEvent(Event e) {
		
		if(e instanceof EventSendPacket) {

    		Packet p = e.getPacket();
    		
			switch(mode.getMode()) {
			
			case "Matrix":
				
				e.setCancelled();
				
				break;
				
			case "BasicPacket":
				
				packetQueue.add(p);
				e.setCancelled();
				
				
				break;
				
			case "Basic":
				
				e.setCancelled();
				
				break;
			
			}
		}
		
		if(e instanceof EventMotion) {
			mc.thePlayer.setPosition(mc.thePlayer.lastTickPosX, mc.thePlayer.posY, mc.thePlayer.lastTickPosZ);

			this.displayInfo = mode.getMode();

			switch(mode.getMode()) {
			
			
			case "Basic":

				mc.thePlayer.setPosition(mc.thePlayer.lastTickPosX, mc.thePlayer.lastTickPosY, mc.thePlayer.lastTickPosZ);
				
				break;
			
			case "NCP":
				
				mc.timer.timerSpeed = 2;
				
				if(mc.thePlayer.onGround)
					mc.thePlayer.motionY = 0.3f;
				else if (mc.thePlayer.fallDistance>0)
					mc.thePlayer.motionY = -0.3;
				
				break;
				
			case "Matrix":
				

				mc.thePlayer.setPosition(mc.thePlayer.lastTickPosX, mc.thePlayer.lastTickPosY, mc.thePlayer.lastTickPosZ);
				break;
			
			}
			
		}
		
		if(e instanceof EventUpdate) {
			vlticks++;
			if(vlticks>40) {
				vlticks = 0;
				mc.timer.timerSpeed = 1;
				if(this.toggled)
					this.toggle();
			}
		}
		
	}

}
