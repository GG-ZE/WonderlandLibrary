package epsilon.modules.exploit;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Queue;
import java.util.UUID;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.stream.Collectors;

import org.apache.commons.lang3.RandomUtils;
import org.lwjgl.input.Keyboard;

import epsilon.Epsilon;
import epsilon.events.Event;
import epsilon.events.listeners.EventMotion;
import epsilon.events.listeners.EventUpdate;
import epsilon.events.listeners.packet.EventReceivePacket;
import epsilon.events.listeners.packet.EventSendPacket;
import epsilon.modules.Module;
import epsilon.modules.ModuleManager;
import epsilon.modules.movement.Fly;
import epsilon.settings.setting.BooleanSetting;
import epsilon.settings.setting.ModeSetting;
import epsilon.settings.setting.NumberSetting;
import epsilon.util.MoveUtil;
import epsilon.util.Timer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C01PacketChatMessage;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.network.play.client.C03PacketPlayer.C05PacketPlayerLook;
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.network.play.client.C11PacketEnchantItem;
import net.minecraft.network.play.client.C12PacketUpdateSign;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C15PacketClientSettings;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C18PacketSpectate;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.block.BlockAir;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;



public class Disabler extends Module {
	private final Queue<Packet> packetQueue = new ConcurrentLinkedDeque<>();

	private final Queue<Packet> packetQueueC0fOnly = new ConcurrentLinkedDeque<>();

	private final Queue<Packet> packetQueueC00Only = new ConcurrentLinkedDeque<>();
	
	
	private double x,y,z, yaw, pitch;
	public static boolean hypixelStrafe, desyncrot;
	private boolean matrixswitch, verusVoid, watchdogStrafed;
	
	private Timer timer = new Timer();


	public BooleanSetting Watchdog2020 = new BooleanSetting ("Watchdog2020", false);
	public BooleanSetting spigot = new BooleanSetting ("SpigotData", false);
	public BooleanSetting C0F = new BooleanSetting ("C0FData", false);
	public BooleanSetting C00 = new BooleanSetting ("C00Key", false);
	public BooleanSetting hsd = new BooleanSetting ("HypixelStrafe", false);
	public BooleanSetting watchdog = new BooleanSetting ("HypixelTimerTest", false);
	public BooleanSetting karhu = new BooleanSetting ("KarhuMovement", false);
	public BooleanSetting ver = new BooleanSetting ("Verus", false);
	
	public BooleanSetting loyisaNCP = new BooleanSetting ("NCP", false);
	public BooleanSetting ncpM = new BooleanSetting ("NCPModulCheck", false);
	public BooleanSetting pp = new BooleanSetting ("PurplePrison", false);
	public BooleanSetting spartan = new BooleanSetting ("Spartan", false);
	public BooleanSetting rede = new BooleanSetting ("Redesky", false);
	public BooleanSetting wz = new BooleanSetting ("Warzone", false);
	public BooleanSetting ml = new BooleanSetting ("MineLatino", false);
	public BooleanSetting zc = new BooleanSetting ("Zonecraft", false);
	public BooleanSetting had = new BooleanSetting ("Hazel", false);
	public BooleanSetting matrixstrafe = new BooleanSetting("MatrixSemiStrafe",false);
	public BooleanSetting superc = new BooleanSetting("SupercraftSkywars", false);
	public BooleanSetting verusfly = new BooleanSetting("VerusLatestFly", false);
	public BooleanSetting mineLatino = new BooleanSetting("Test", false);
	public BooleanSetting matrix = new BooleanSetting("Matrix4.04Damage", false);
	public BooleanSetting vcmbt = new BooleanSetting("VerusCombat", false);
	public BooleanSetting vst = new BooleanSetting ("KauriMovement", false);
	public BooleanSetting test = new BooleanSetting("RotationDesync", false);
	public BooleanSetting interact = new BooleanSetting("Interact", false);
	public BooleanSetting entityact = new BooleanSetting("EntityAction", false);
	public ModeSetting et = new ModeSetting ("EntityActType", "Jump", "Jump", "Sneak", "StopSneak", "Sprint", "Stop Sprint", "Sleep", "Inventory");
	public ModeSetting ea = new ModeSetting("EntityTargetMode", "Self", "Self", "Random");
	public BooleanSetting voidtp = new BooleanSetting("VoidTP", false);
	public BooleanSetting goofyC0C = new BooleanSetting("GoofyC0C", false);
	public BooleanSetting inp = new BooleanSetting("Input", false);
	public BooleanSetting dig = new BooleanSetting ("Dig", false);
	public ModeSetting digtype = new ModeSetting("DigType", "Under", "Under", "Self", "OutOfBounds", "Unloaded");
	public BooleanSetting place = new BooleanSetting("Place", false);
	public ModeSetting placetype = new ModeSetting("Placetype", "Under", "Under", "Self", "OutOfBounds", "Unloaded");
	public BooleanSetting confirmtransaction = new BooleanSetting("ConfirmTransaction", false);
	public ModeSetting transactiontype = new ModeSetting("TransType", "Delayed", "Delayed", "Cancel");
	public BooleanSetting creativeact = new BooleanSetting("CreativeAction", false);
	public BooleanSetting abilities = new BooleanSetting("Abilities", false);
	public BooleanSetting respawn = new BooleanSetting("Respawn", false);
	public BooleanSetting spectate = new BooleanSetting("Spectate", false);
	public static ModeSetting mode = new ModeSetting("ModeDisplay", "Watchdog", "Watchdog","2020Watchdog", "Verus" ,"SpigotData", "C0FData","C00Key", "Minelatino", "Karhu", "Kauri", "UpdatedNCP","VerusCombat", "Supercraft", "MatrixSemiStrafe","RotationDesync", "Interact","Entity", "Void", "SteerMAX", "Steer", "C04", "RoundedPos", "RoundedRot", "Bounds", "Dig", "Place", "NullChange", "C0F", "CreativeAction", "Abilities", "Respawn", "Spectate");
	
	float vulcanyaw;
	double groundpos;
	
	public Disabler(){
		super("Disabler", Keyboard.KEY_F, Category.EXPLOIT, "Cripples anticheats");
		this.addSettings(hsd, watchdog, Watchdog2020,spigot, C0F, C00,ver,karhu, loyisaNCP, ncpM, pp, spartan, rede,zc,wz,ml,had,matrixstrafe,superc,matrix,verusfly,vcmbt,vst,test,interact,entityact,et, ea,voidtp, inp,goofyC0C, dig,digtype,place, placetype,confirmtransaction, transactiontype,creativeact, abilities, respawn, spectate, mode);
	}
	
	
	public void onEnable(){
		verusVoid = watchdogStrafed = false;
		timer.reset();
		packetQueue.clear();
		if(verusfly.isEnabled()) {
			Epsilon.addChatMessage("Verusfly will not work with blocks in your hand btw");
		}
		matrixswitch = false;
		if(vst.isEnabled()) {
			vulcanyaw = mc.thePlayer.cameraYaw;
		}
		
	
		hypixelStrafe = false;
	
		
		if(matrix.isEnabled()) {
			Epsilon.addChatMessage("Hit yourself with a projectile whilst jumping, enable fly while in air and profit. (colliding with a block will end it)");
		}
		
	}
	
	public void onDisable(){
		desyncrot = false;
		hypixelStrafe = false;
		mc.thePlayer.isDead = false;
		for(Packet packet : packetQueue) {
			mc.getNetHandler().sendPacketNoEvent(packet);
		}
		packetQueue.clear();
	}
	
	 
	public void onEvent(Event e){
		
		
		if(e instanceof EventReceivePacket && mc.getNetHandler()!=null) {
			

			Packet p = e.getPacket();
			
			if(p instanceof S08PacketPlayerPosLook && mc.getNetHandler().doneLoadingTerrain && hsd.isEnabled()) {
				
				watchdogStrafed = true;
				
			}
			
			if(spigot.isEnabled() && p instanceof S08PacketPlayerPosLook) {

				final S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) p;
				packet.y+= 1.0E-4;
			}
			
			if(ver.isEnabled() && verusVoid && p instanceof S08PacketPlayerPosLook) {

			}
			
			if(loyisaNCP.isEnabled()&& mc.getNetHandler().doneLoadingTerrain) {


				if(p instanceof S08PacketPlayerPosLook) {

					S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) p;
					MoveUtil move = new MoveUtil();
					
					boolean acceptedX = (move.getXZDifference(mc.thePlayer.posX, mc.thePlayer.posZ, packet.x, packet.x)[0] > 0);
					boolean acceptedZ = (move.getXZDifference(mc.thePlayer.posX, mc.thePlayer.posZ, packet.x, packet.x)[1] > 0);

			        boolean m = true;
			        boolean fly = false;
					mc.getNetHandler().sendPacketNoEvent(new C06PacketPlayerPosLook(packet.x, packet.y, packet.z, packet.yaw, packet.pitch, true));
							
			        

				}
				
				
			}
			
			if(spartan.isEnabled() && mc.getNetHandler().doneLoadingTerrain) {
				
				
			}
			
			if(rede.isEnabled() && mc.getNetHandler().doneLoadingTerrain) {
				
					if(p instanceof S08PacketPlayerPosLook) {
						S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) p;
	        			e.setCancelled();
	        			mc.getNetHandler().sendPacketNoEvent(new C06PacketPlayerPosLook(packet.x, packet.y, packet.z, packet.yaw, packet.pitch, mc.thePlayer.onGround));
	        			
	        			
	        			
	    			}
					if(p instanceof S12PacketEntityVelocity) {
						e.setCancelled();
					}
			}
		}
		
		if(e instanceof EventSendPacket && mc.thePlayer!=null && mc.getNetHandler()!=null) {

    		Packet p = e.getPacket();
    		if(mc.getNetHandler().doneLoadingTerrain) {
    			
    			if(hsd.isEnabled()) {
    				if(watchdogStrafed && !(p instanceof C06PacketPlayerPosLook)) {
    					e.setCancelled();
    				}
    			}
    			
    			if(Watchdog2020.isEnabled()) {
    				
    				if(p instanceof C0FPacketConfirmTransaction) {
    					e.setCancelled();
    					packetQueue.add(p);

		    			if(timer.hasTimeElapsed((15000), true)) {
		    				for(Packet packet : packetQueue) {
			    				mc.getNetHandler().sendPacketNoEvent(packet);
			    			}
			    			packetQueue.clear();
		    			}
    				}
    				
    				if(p instanceof C03PacketPlayer) {
    					mc.getNetHandler().addToSendQueue(new C13PacketPlayerAbilities());
    				}
    				
    				if(p instanceof C13PacketPlayerAbilities) {
    					C13PacketPlayerAbilities c13 = (C13PacketPlayerAbilities) p;
    					
    					c13.setFlying(true);
    					
    				}
    				
    			}

    			if(C0F.isEnabled()) {
    				if(p instanceof C0FPacketConfirmTransaction) {
    					
    					final C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) p;
    					
    					c0f.uid = 1337;
    					c0f.accepted = false;
    					
    					
    				}
    			}
    			
    			if(C00.isEnabled() && p instanceof C00PacketKeepAlive) {
    				
    				final C00PacketKeepAlive c00 = (C00PacketKeepAlive) p;
    				
    				c00.key = 1337;
    				
    				
    				
    				
    			}
    			
    			if(ver.isEnabled()) {
    				
    				e.setCancelled();
    				packetQueue.add(p);
    				
    				if(p instanceof C0FPacketConfirmTransaction) {
    					C0FPacketConfirmTransaction c = (C0FPacketConfirmTransaction) p;
    					
    					c.id = 69;
    				}

	    			if(timer.hasTimeElapsed((400), true)) {
	    				for(Packet packet : packetQueue) {
		    				mc.getNetHandler().sendPacketNoEvent(packet);
		    			}
		    			packetQueue.clear();
	    			}
    			}
    			
    			if(had.isEnabled()) {
    				if (this.mc.thePlayer.ticksExisted < 20) {
    	                return;
    	            }
    				
    				if(e.getPacket() instanceof C0FPacketConfirmTransaction && this.mc.thePlayer.ticksExisted % 3 == 1) {
    	            	C0FPacketConfirmTransaction c0F = (C0FPacketConfirmTransaction)e.getPacket();
    	            	c0F.getUid();
    	            	C00PacketKeepAlive c00 = (C00PacketKeepAlive)e.getPacket();
    	                c00.key = (int) ((int) 1000 * Math.random() + Math.PI + Math.E);
    	                c00.getKey();
    	                packetQueue.add(e.getPacket());
    	                e.setCancelled();
    	            }
    				if(e.getPacket() instanceof C00PacketKeepAlive && this.mc.thePlayer.ticksExisted % 3 == 1) {
    	                C00PacketKeepAlive c00 = (C00PacketKeepAlive)e.getPacket();
    	                c00.key = (int) ((int) Math.random() + Math.PI + Math.E);
    	                c00.getKey();
    	                packetQueue.add(e.getPacket());
    	            	e.setCancelled();
    	            }
    				if (e.getPacket() instanceof C0BPacketEntityAction && this.mc.thePlayer.ticksExisted % 3 == 1) {
    	                e.setCancelled();
    	                packetQueue.add(e.getPacket());
    	                mc.thePlayer.sendQueue.sendPacketNoEventDelayed(e.getPacket(), 4000);
    	            }
    				if(e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook && this.mc.thePlayer.ticksExisted % 40 == 0) {
    	            	C03PacketPlayer.C06PacketPlayerPosLook packet = (C03PacketPlayer.C06PacketPlayerPosLook) e.getPacket();
    	            	packet.field_149480_h = false;
    	            	packet.y = (int) ((int) 1000 * Math.random() + Math.PI + Math.E);
    	            	e.setCancelled();
    	            	packetQueue.add(e.getPacket());
    	            }
    	            
    	            if(e.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook && this.mc.thePlayer.ticksExisted % 40 == 0) {
    	            	C03PacketPlayer.C05PacketPlayerLook packet = (C03PacketPlayer.C05PacketPlayerLook) e.getPacket();
    	            	packet.rotating = true;
    	            	packet.pitch = (int) ((int) 1000 * Math.random() + Math.PI + Math.E);
    	            	packet.yaw = (int) ((int) 1000 * Math.random() + Math.PI + Math.E);
    	            	e.setCancelled();
    	            	packetQueue.add(e.getPacket());
    	            }
    	            if (e.getPacket() instanceof C0BPacketEntityAction) {
    	                C0BPacketEntityAction packetEntityAction = (C0BPacketEntityAction)e.getPacket();
    	                if (packetEntityAction.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
    	                   e.setCancelled();
    	                }
    	            }
    	            if (this.mc.thePlayer.ticksExisted % 120 == 0) {
	    				for(Packet packet : packetQueue) {
		    				mc.getNetHandler().sendPacketNoEvent(packet);
		    			}
		    			packetQueue.clear();
    				}
    	            
    	            if(e.getPacket() instanceof C03PacketPlayer) {
    		            mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities());
    				}
    	            
    	            if (e.getPacket() instanceof C13PacketPlayerAbilities) {
    	                C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities) e.getPacket();
    	                packet.setAllowFlying(true);
    	                packet.setCreativeMode(true);
    	                packet.setInvulnerable(true);
    	                packet.setFlying(true);
    	            }
    			}

    			if(watchdog.isEnabled()) {
    				
    				
				
    			}
    			
    			
    			if(pp.isEnabled()) {
    				
    				
    				if(mc.thePlayer.ticksExisted>60) {
    					if(p instanceof C03PacketPlayer) {
    						C03PacketPlayer packet = (C03PacketPlayer) p;
    						packet.setY(packet.getY()+0.015625);
    						
    					}
    					
    					
    				}else {
    					if(mc.thePlayer.ticksExisted>61) {
    						if(p instanceof C0FPacketConfirmTransaction) {
    							e.setCancelled();
    						}
    					}else 
    	    				if(mc.thePlayer.ticksExisted%100==0 && mc.thePlayer.ticksExisted>100) {
    	    					if(p instanceof C03PacketPlayer.C04PacketPlayerPosition || p instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
    	    						C03PacketPlayer packet = (C03PacketPlayer) p;
    	    						packet.setX(0);
    	    						packet.setY(-50000);
    	    						packet.setZ(0);
    	    					}
    	    				}
    				}
    			}
    		}
    		
    		if(rede.isEnabled() || spartan.isEnabled()) {
    			
    			e.setCancelled();
    			packetQueue.add(p);
    			
    			if(timer.hasTimeElapsed((long) (1000*(Math.random()+1)), true)) {
    				for(Packet packet : packetQueue) {
	    				mc.getNetHandler().sendPacketNoEvent(packet);
	    			}
	    			packetQueue.clear();
    			}
    			
    		}
    		
    		if(zc.isEnabled()) {
    			if(mc.thePlayer.ticksExisted<1)
    				return;
    			mc.timer.timerSpeed = 0.8f;

    				e.setCancelled();
    				short delay = 690;
    				if(p instanceof C00PacketKeepAlive || p instanceof C0FPacketConfirmTransaction)
    					delay = 2500;
    				
    					mc.getNetHandler().sendPacketNoEventDelayed(p, delay);
    					
    				if(p instanceof C03PacketPlayer) {
    					C03PacketPlayer packet = (C03PacketPlayer) p;
    					if(!mc.thePlayer.onGround)
    					packet.onGround = mc.thePlayer.ticksExisted%2==0;
    				}
    				
    				
    			
    			
    			
    		}
    		
    		if(wz.isEnabled()) {
    			if(p instanceof C0FPacketConfirmTransaction || p instanceof C00PacketKeepAlive) {
    				if(p instanceof C00PacketKeepAlive) 
    					packetQueue.add(p);
    				
    				if(p instanceof C0FPacketConfirmTransaction)
    					packetQueueC0fOnly.add(p);
    				
					e.setCancelled();
    			}
    			
    			if(timer.hasTimeElapsed((long) (5412+((Math.random()+1)*6)), true)) {
    				for(Packet packet : packetQueue) {
	    				mc.getNetHandler().sendPacketNoEvent(packet);
	    			}
	    			packetQueue.clear();
    			
    			}
    			if(timer.hasTimeElapsed2((long) (1337+((Math.random()+1)*6)), true)) {
    				for(Packet packet : packetQueueC0fOnly) {
	    				mc.getNetHandler().sendPacketNoEvent(packet);
	    			}
    				packetQueueC0fOnly.clear();
    			}
    			
				
    		}
    		
    		if(vcmbt.isEnabled() || confirmtransaction.isEnabled()) {
    			
    			short delay = 1550;
    			
    			if(p instanceof C02PacketUseEntity) {
    				delay+=15;
    			}
    			
    			if(p instanceof C0FPacketConfirmTransaction) {
    				e.setCancelled();
    			
    			mc.getNetHandler().sendPacketNoEventDelayed(p, delay);
    			
    			}
    		}
    		if(mc.getNetHandler().getNetworkManager()!=null) {
	    		if((ml.isEnabled() || superc.isEnabled()) && mc.getNetHandler()!=null && mc.thePlayer.ticksExisted>0) {
	    			short delay = (short) (superc.isEnabled() ? 200 : 505);
	    			if(p instanceof C01PacketChatMessage) 
	    				return;
	    			
	    			e.setCancelled();
	    			mc.getNetHandler().sendPacketNoEventDelayed(p, delay);
	    			if(p instanceof C03PacketPlayer) {
	    				C03PacketPlayer packet = (C03PacketPlayer) p;
	    				//packet.onGround = mc.thePlayer.ticksExisted%2==0 ? true : false;
	    				//packet.setY(packet.getY()+0.015625);
	    			}
	    			
	    			
	    			
	    		}
    		}
			
		}
		
		if(e instanceof EventMotion && mc.getNetHandler()!=null) {
			EventMotion event = (EventMotion)e;
			
			MoveUtil move = new MoveUtil();
			
			if(karhu.isEnabled()) {
				event.setY(event.getY()+0.015625);
			}
			
			if(loyisaNCP.isEnabled() && move.isMoving()) {
				event.setOnGround(true);
				
				
				final double yawww = Math.toRadians(mc.thePlayer.rotationYaw);
				
				
				double expectedXX;
				double expectedYY;
			    double expectedZZ;
				
				double xx = mc.thePlayer.posX;
		        double yy = mc.thePlayer.posY;
		        double zz = mc.thePlayer.posZ;
		        

		        
		        expectedXX = xx + (-Math.sin(yawww) * 9);
		        expectedZZ = zz + (Math.cos(yawww) * 9);
		        if(mc.gameSettings.keyBindJump.getIsKeyPressed())  
			        yy = 5;
		        
				else if (mc.gameSettings.keyBindSneak.getIsKeyPressed())
					yy = -5;
				else
					yy = 0;

		        vulcanyaw = (float) yy;
		        
		        boolean m = true;
		        boolean fly = false;
		        
				if(ncpM.isEnabled()) {
					for(Module a: Epsilon.modules) {
						if(a.isEnabled() && a.getCategory() == Category.MOVEMENT) {
							m = true;
							if(a.getName() == "Fly") {
								fly = true;
							}
						}
					}
				}
		        
		        if(!ncpM.isEnabled() || m) {
		        	
		        	if(!ncpM.isEnabled() || fly ) {
		        		
		        		
		        		
						if(!mc.thePlayer.onGround || (mc.theWorld.getBlockState(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ)).getBlock() instanceof BlockAir && mc.thePlayer.onGround)) {
							mc.getNetHandler().addToSendQueue(new C04PacketPlayerPosition(expectedXX, mc.thePlayer.posY+yy, expectedZZ, true));
		
					        expectedXX = xx + (-Math.sin(yawww) * -9);
					        expectedZZ = zz + (Math.cos(yawww) * -9);
							mc.getNetHandler().addToSendQueue(new C04PacketPlayerPosition(expectedXX, mc.thePlayer.posY, expectedZZ, true));
						}else {
		
							mc.getNetHandler().addToSendQueue(new C04PacketPlayerPosition(expectedXX, mc.thePlayer.posY, expectedZZ, true));
		
					        expectedXX = xx + (-Math.sin(yawww) * -9);
					        expectedZZ = zz + (Math.cos(yawww) * -9);
							mc.getNetHandler().addToSendQueue(new C04PacketPlayerPosition(expectedXX, mc.thePlayer.posY, expectedZZ, true));
						}
		        	}
		        }
				
			}
			
			
			if(rede.isEnabled()) {
				
				if(mc.thePlayer.ticksExisted<69 && mc.getNetHandler().doneLoadingTerrain) {
					event.setY(event.getY()+0.000125);
				}
				
			}
			
			if(interact.isEnabled() && mc.getNetHandler().doneLoadingTerrain && mc.thePlayer !=null && e.isPre()) {
				List<EntityLivingBase> targets = (List<EntityLivingBase>) mc.theWorld.loadedEntityList.stream().filter(EntityLivingBase.class::isInstance).collect(Collectors.toList());
				
				targets = targets.stream().filter(entity -> entity.getDistanceToEntity(mc.thePlayer) > 1 && entity != mc.thePlayer && !entity.isDead && entity.getHealth() > 0).collect(Collectors.toList());
	
				targets.sort(Comparator.comparingDouble(entity -> ((EntityLivingBase)entity).getDistanceToEntity(mc.thePlayer)));
				if(mc.thePlayer.ticksExisted%2==0 && !targets.equals(null)) {
					Entity target = targets.get(0);
					mc.getNetHandler().addToSendQueue(new C02PacketUseEntity(target, C02PacketUseEntity.Action.INTERACT));
				}	
			}
			
			
			if(matrixstrafe.isEnabled()) {
				final double yaw;
				if(mc.thePlayer.ticksExisted%2==0) {
					yaw = Math.toRadians(mc.thePlayer.cameraYaw);
					event.setX(event.getX() + (-Math.sin(yaw * 0.001)));
					event.setZ(event.getZ() + (Math.sin(yaw * 0.001)));
				}else {
					yaw = Math.toRadians(mc.thePlayer.cameraYaw);
					event.setX(event.getX() + (-Math.sin(yaw * -0.001)));
					event.setZ(event.getZ() + (Math.sin(yaw * -0.001)));
				}
			}
			if(creativeact.isEnabled()) {
				ItemStack what = null;
				mc.thePlayer.sendQueue.addToSendQueue(new C10PacketCreativeInventoryAction(1, what));
			} 
			
			if(vst.isEnabled()) {
				event.setYaw(vulcanyaw);
				if(mc.thePlayer.ticksExisted %2 ==0) {
					event.setYaw(-3141);
					MoveUtil moveUtil = new MoveUtil();
					if(mc.gameSettings.keyBindForward.getIsKeyPressed()|| mc.gameSettings.keyBindBack.getIsKeyPressed() || mc.gameSettings.keyBindRight.getIsKeyPressed()|| mc.gameSettings.keyBindLeft.getIsKeyPressed())
					moveUtil.packetComedy( -0.1, -0);
				}else {
					MoveUtil moveUtil = new MoveUtil();
				}
			}
			if(voidtp.isEnabled() && mc.thePlayer.ticksExisted % 20 == 0) 
				event.setY(-1);
			
			
			
		}
		
		
		if(e instanceof EventUpdate) {
			this.displayInfo = mode.getMode();
			}
			
		
		
		if(e instanceof EventUpdate && mc.getNetHandler()!=null) {
			MoveUtil move = new MoveUtil();
			
			
			
			if(e.isPre()) {
				if(verusfly.isEnabled()) {
					if(mc.thePlayer.onGround)
						groundpos = mc.thePlayer.posY;
					//if(move.getBlockRelativeToPlayer(0, 0, 0) instanceof BlockAir) {
						//mc.thePlayer.swingItem();
					if(!mc.thePlayer.onGround)
						place(new BlockPos(mc.thePlayer.posX,mc.thePlayer.posY - groundpos,mc.thePlayer.posZ), 1, new ItemStack(Blocks.stone.getItem(mc.theWorld, new BlockPos(0, 0, 0))), 0.5f, 0.5f, 0.5f);
					//}
				}
			}
			
			if(mc.getNetHandler().doneLoadingTerrain && test.isEnabled()) {
				
				desyncrot = true;
				//if(!(mc.currentScreen instanceof GuiChest))
				//mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement
					//	(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ), 1,
						//new ItemStack(Blocks.stone.getItem
						//(mc.theWorld, new BlockPos(1, 1, 1))), 0, 0f, 0));
				
			}
			
		}
		
		if(ea.getMode() == "Self") {
			Entity thething = mc.thePlayer;
		}
		if(e instanceof EventUpdate){
			
			if(matrix.isEnabled()) {
				if(mc.thePlayer.ticksExisted % 4== 0) {	
					mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.RIDING_JUMP));
				}
			}
			
			if(inp.isEnabled()) {
				mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
			}
			
			
			if(e.isPre()) {
				
				
				if(goofyC0C.isEnabled()) {
					if (mc.thePlayer.ticksExisted % 4 == 0) {
						mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, false, false));
		            }
				}
				
				if(spectate.isEnabled()) {
					mc.thePlayer.sendQueue.addToSendQueue(new C18PacketSpectate(UUID.randomUUID()));
				}
				if(place.isEnabled()) {
					mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement
							(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ), 1,
							new ItemStack(Blocks.stone.getItem
							(mc.theWorld, new BlockPos(0, 0, 0))), 0.5f, 0.5f, 0.5f));
				}
				if(dig.isEnabled()) {
					if(digtype.getMode() == "Under") {
						final BlockPos blockPos = new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ);
						mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, blockPos, EnumFacing.UP));
					}else if (digtype.getMode() == "Self") {
						final BlockPos blockPos = new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);
						mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, blockPos, EnumFacing.UP));
					}else if (digtype.getMode() == "OutOfBounds") {
						final BlockPos blockPos = new BlockPos(mc.thePlayer.posX+12, mc.thePlayer.posY +12, mc.thePlayer.posZ+12);
						mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, blockPos, EnumFacing.UP));
					}else if (digtype.getMode() == "Unloaded") {
						final BlockPos blockPos = new BlockPos(mc.thePlayer.posX*256, mc.thePlayer.posY*256, mc.thePlayer.posZ*256);
						mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, blockPos, EnumFacing.UP));
					}
					
				}
				if(entityact.isEnabled()) {
					
					if(et.getMode() == "Jump") {
					
					mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.RIDING_JUMP));
					}
					if(et.getMode() == "Sneak") {
					mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
					}
					if(et.getMode() == "StopSneak") {
						mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
					}
					if(et.getMode() == "Sprint") {
						mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
					}
					if(et.getMode() == "StopSprint") {
						mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
					}
					if(et.getMode() == "Sleep") {
						mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SLEEPING));
					}	
					if(et.getMode() == "Inventory") {
						mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.OPEN_INVENTORY));
					}	
				}	
				if(respawn.isEnabled()) {
					mc.thePlayer.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
				}
				if(abilities.isEnabled()) {
					mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities());
				}
				
				
				
			}
		}
	}
	private void place(BlockPos b, int placeDirect, ItemStack itemStack, float faceX, float faceY, float faceZ) {
		mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement(b, placeDirect, itemStack, faceX, faceY, faceZ));
	}


	
}