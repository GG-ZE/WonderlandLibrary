package dev.tenacity.module.impl.exploit;

import dev.tenacity.event.impl.game.world.TickEvent;
import dev.tenacity.event.impl.game.world.WorldEvent;
import dev.tenacity.event.impl.network.PacketReceiveEvent;
import dev.tenacity.event.impl.network.PacketSendEvent;
import dev.tenacity.event.impl.player.UpdateEvent;
import dev.tenacity.module.Category;
import dev.tenacity.module.Module;

import dev.tenacity.ui.notifications.NotificationManager;
import dev.tenacity.ui.notifications.NotificationType;
import dev.tenacity.utils.ExploitUtils;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S01PacketJoinGame;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S1BPacketEntityAttach;

import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

public class GodMode extends Module {
    private Map<Integer, Queue<Packet<?>>> queue;

    public int currTick;
    public int leftTick;
    private boolean waitingForReset;
    public int keepAliveTick;
    public long displayTime;
    public boolean last;



    public GodMode() {
        super("VerusExploit", Category.EXPLOIT, "Verus is insane.");
        this.queue = new HashMap<Integer, Queue<Packet<?>>>();
        this.currTick = 0;
        this.leftTick = 0;
        this.waitingForReset = false;
        this.keepAliveTick = 0;
        this.displayTime = 0L;
        this.last = false;
    }

    @Override
    public void onUpdateEvent(UpdateEvent event) {


        super.onUpdateEvent(event);
    }

    @Override
    public void onEnable() {
        this.currTick = 0;
        this.leftTick = 0;
        this.waitingForReset = false;
        this.waitingForReset = false;
        this.queue.clear();
        NotificationManager.post(NotificationType.WARNING,"Btw","Boat Disaballer Place two Boats then right click on them");

        super.onEnable();

    }

    @Override
    public void onTickEvent(TickEvent event) {

        ++this.currTick;
        if (this.mc.thePlayer.ridingEntity != null) {
            for (final Entity entity : this.mc.theWorld.getLoadedEntityList()) {
                if (entity instanceof EntityBoat) {
                    final double deltaX = entity.posX - this.mc.thePlayer.posX;
                    final double deltaY = entity.posY - this.mc.thePlayer.posY;
                    final double deltaZ = entity.posZ - this.mc.thePlayer.posZ;
                    if (Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) >= 5.0) {
                        continue;
                    }
                    this.mc.timer.timerSpeed = 0.5f;
                    //   this.mc.timer.timerSpeed = 0.5f;

                    if (entity == this.mc.thePlayer.ridingEntity) {
                        continue;
                    }
                    int item = -1;
                    double highest = 0.0;
                    for (int i = 36; i < 45; ++i) {
                        if (this.mc.thePlayer.inventoryContainer.getSlot(i).getStack() != null && ExploitUtils.getItemDamage(this.mc.thePlayer.inventoryContainer.getSlot(i).getStack()) > highest) {
                            highest = ExploitUtils.getItemDamage(this.mc.thePlayer.inventoryContainer.getSlot(i).getStack());
                            item = i - 36;
                        }
                    }
                    if (highest == 0.0) {
                        item = -1;
                    }
                    if (item == -1) {
                        NotificationManager.post(NotificationType.WARNING,"Warning","You need to hold a better weapon");

                        return;
                    }
                    if (item != this.mc.thePlayer.inventory.currentItem) {
                        this.mc.thePlayer.inventory.currentItem = item;
                        return;
                    }
                    if (this.mc.thePlayer.getCurrentEquippedItem() == null || ExploitUtils.getItemDamage(this.mc.thePlayer.getCurrentEquippedItem()) < 4.0) {
                        NotificationManager.post(NotificationType.WARNING,"Warning","You need to hold a better weapon");

                        return;
                    }

                    mc.thePlayer.rotationPitch = 90.0f;
                    this.mc.thePlayer.swingItem();
                    this.mc.playerController.attackEntity((EntityPlayer)this.mc.thePlayer, this.mc.thePlayer.ridingEntity);
                    this.mc.thePlayer.swingItem();
                    this.mc.playerController.attackEntity((EntityPlayer)this.mc.thePlayer, entity);
                }
            }
        }

        //else {
        // if (!((Timer)ModulesManager.getModuleByClass((Class)Timer.class)).isToggled()) {
        //   this.mc.timer.timerSpeed = 1.0;
        //}
        // else {
        //      this.mc.timer.timerSpeed = ((Timer)ModulesManager.getModuleByClass((Class)Timer.class)).timerSpeed.getValue();
        //  }
        // }

        super.onTickEvent(event);
    }

    @Override
    public void onWorldEvent(WorldEvent event) {

        super.onWorldEvent(event);
    }

    @Override
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        if (event.getPacket() instanceof S07PacketRespawn || event.getPacket() instanceof S01PacketJoinGame) {
            this.queue.clear();
            this.currTick = 0;
            this.waitingForReset = false;
        }
        if (event.getPacket() instanceof S13PacketDestroyEntities) {
            if (((S13PacketDestroyEntities)event.getPacket()).getEntityIDs().length != 1) {
                for (final int entityID : ((S13PacketDestroyEntities)event.getPacket()).getEntityIDs()) {
                    if (entityID == this.mc.thePlayer.ridingEntity.getEntityId()) {
                        this.mc.timer.timerSpeed = 1.0f;
                        NotificationManager.post(NotificationType.WARNING,"Fail","Final Nigger, \"Final GrandPa Activated! (GodMode + Semi Disabler)");
                        this.waitingForReset = true;
                    }
                }
            }
            else {
                for (final int entityID : ((S13PacketDestroyEntities)event.getPacket()).getEntityIDs()) {
                    if (entityID == this.mc.thePlayer.ridingEntity.getEntityId()) {
                        NotificationManager.post(NotificationType.WARNING,"Fail","Final GrandPaMom, \"Activation of Nigger has Failed!!");

                        this.displayTime = System.currentTimeMillis();
                        for (int i = 0; i < 20; ++i) {

                            NotificationManager.post(NotificationType.WARNING,"Fail","YOU HAVEN'T ACTIVATED Nigger SUCCESSFULLY!");

                        }
                    }
                }
            }
        }
        if (event.getPacket() instanceof S1BPacketEntityAttach && ((S1BPacketEntityAttach)event.getPacket()).getEntityId() == this.mc.thePlayer.getEntityId() && ((S1BPacketEntityAttach)event.getPacket()).getVehicleEntityId() > 0) {
            this.currTick = 0;
        }

        super.onPacketReceiveEvent(event);
    }

    @Override
    public void onPacketSendEvent(PacketSendEvent event) {
        if (event.getPacket() instanceof C03PacketPlayer) {
            if (this.mc.thePlayer.isRiding()) {
                ((C03PacketPlayer)event.getPacket()).onGround = false;
            }
            if (this.waitingForReset) {
                ((C03PacketPlayer)event.getPacket()).onGround = false;
            }
            if (!this.mc.thePlayer.isRiding() || this.mc.thePlayer.ridingEntity == null || this.currTick <= 50) {}
            if (this.mc.thePlayer.getHealth() >= 19.0f || !this.waitingForReset || this.mc.thePlayer.isDead || this.mc.thePlayer.onGround) {}
        }
        super.onPacketSendEvent(event);
    }


}
